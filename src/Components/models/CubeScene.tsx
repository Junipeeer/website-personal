/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 .\cube_scene.glb 
*/

import { useGLTF, PerspectiveCamera } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { easing } from "maath";
import { useRef } from "react";
import { Group, Object3D } from "three";

export function CubeScene({ isMouseInWindow, ...props }) {
  const { nodes, materials } = useGLTF("/models/cube_scene.glb");
  const groupRef = useRef(new Group());
  const cubeRef = useRef(new Object3D());
  const pedestalLowerRef = useRef(new Object3D());
  const pedestalUpperRef = useRef(new Object3D());

  useFrame((state, delta) => {
    const elapsed = state.clock.getElapsedTime();

    const cubeTranslateY = Math.sin(elapsed) * 0.5;
    const idleCubeRotX = Math.sin(elapsed * 0.5) * 0.2;
    const idleCubeRotY = Math.cos(elapsed * 0.3) * 0.2;
    const idleCubeRotZ = Math.sin(elapsed * 0.7) * 0.08;

    //adjust camera position
    easing.damp3(state.camera.position, [0, 5.802, 88.424], 0.25, delta);

    //cube rotation based on mouse position and idle rotation
    easing.dampE(
      cubeRef.current.rotation,
      [
        isMouseInWindow ? state.pointer.y + idleCubeRotY : idleCubeRotY,
        isMouseInWindow ? -state.pointer.x + idleCubeRotX : idleCubeRotX,
        idleCubeRotZ,
      ],
      0.25,
      delta
    );

    //lower pedestal rotation based on mouse position
    easing.dampE(
      pedestalLowerRef.current.rotation,
      [0, isMouseInWindow ? state.pointer.y + state.pointer.x : 0, 0],
      0.25,
      delta
    );
    //lower pedestal rotation based on mouse position
    easing.dampE(
      pedestalUpperRef.current.rotation,
      [0, isMouseInWindow ? -state.pointer.y + -state.pointer.x : 0, 0],
      0.25,
      delta
    );

    //cube vertical wobble
    easing.damp3(
      cubeRef.current.position,
      [0, 4 + cubeTranslateY, 0],
      0.25,
      delta
    );
  });

  return (
    <group {...props} ref={groupRef} dispose={null}>
      <pointLight
        intensity={20000}
        decay={2}
        color="#67fcff"
        position={[-15.788, 19.857, -19.49]}
        rotation={[-2.752, -0.324, -2.15]}
        scale={4.32}
      />
      <PerspectiveCamera
        makeDefault={true}
        far={1000}
        near={0.1}
        fov={22.895}
        position={[0, 5.802, 88.424]}
        rotation={[-0.087, 0, 0]}
      />
      <pointLight
        intensity={20000}
        decay={2}
        color="#ff9aef"
        position={[0, -31.01, 0]}
        rotation={[-Math.PI / 2, 0, 0]}
      />
      <mesh
        ref={cubeRef}
        geometry={nodes.Cube.geometry}
        material={materials.glass}
        position={[0, 4, 0]}
      >
        <pointLight
          intensity={5000}
          decay={2}
          color="#7c8dff"
          rotation={[-2.752, -0.324, -2.15]}
          scale={4.32}
        />
      </mesh>
      <mesh
        geometry={nodes.ground_plane.geometry}
        material={materials["Material.001"]}
        position={[0, -13.5, 0]}
      />
      <mesh
        ref={pedestalLowerRef}
        geometry={nodes.Pedestal_bottom.geometry}
        material={materials["Material.001"]}
        position={[0, -10, 0]}
        scale={0.6}
      />
      <mesh
        ref={pedestalUpperRef}
        geometry={nodes.Pedestal_top.geometry}
        material={materials["Material.001"]}
        position={[0, -10, 0]}
        scale={0.6}
      />
      <mesh
        geometry={nodes.Pedestal_base.geometry}
        material={materials["Material.001"]}
        position={[0, -10, 0]}
        scale={0.6}
      />
    </group>
  );
}

useGLTF.preload("/models/cube_scene.glb");

export default CubeScene;
